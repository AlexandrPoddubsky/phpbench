{
    "params": {
        "selector": "//subject/variant"
    },
    "classes": {
        "deviation": [
            [ "number", { "decimal_places": 2 }],
            [ "printf", { "format": "%s%%" } ],
            [ "balance" ]
        ],
        "memory": [
            [ "number" ],
            [ "printf", { "format": "%d<comment>b</comment>" }]
        ],
        "time_pr": [
            [ "number", { "decimal_places": 2 }],
            [ "printf", { "format": "%s<comment>\u03bcs</comment>" }]
        ],
        "time": [
            [ "number", { "decimal_places": 0 }],
            [ "printf", { "format": "%s<comment>\u03bcs</comment>" }]
        ]
    },
    "rows": [
        {
            "cells": {
                "benchmark": {
                    "expr": "class_name(string(ancestor-or-self::benchmark/@class))"
                },
                "subject": {
                    "expr": "string(ancestor-or-self::subject/@name)"
                },
                "group": {
                    "expr": "string(ancestor-or-self::group/@name)"
                },
                "params": {
                    "expr": "parameters_to_json(ancestor-or-self::variant/parameter)"
                },
                "revs": {
                    "expr": "number(sum(descendant-or-self::iteration/@revs))"
                },
                "iters": {
                    "expr": "count(descendant-or-self::iteration)"
                },
                "time": {
                    "class": "time",
                    "expr": "number(descendant-or-self::iteration/@time)"
                },
                "time_pr": {
                    "class": "time_pr",
                    "expr": "sum(descendant-or-self::iteration/@time) div sum(descendant-or-self::iteration/@revs)"
                },
                "memory": {
                    "class": "memory",
                    "expr": "number(descendant-or-self::iteration/@memory)"
                },
                "deviation": {
                    "class": "deviation",
                    "expr": "deviation(min(//cell[@name='time']), number(./cell[@name='time']))",
                    "pass": 1
                },
                "stability": {
                    "class": "deviation",
                    "expr": "100 - deviation(min(descendant::iteration/@time), average(descendant::iteration/@time))"
                }
            },
            "with_query": "{{ param.selector }}"
        }
    ]
}
